/** \mainpage
  * \section Abstract_section Abstract
  * Search   engines,   social   networks   and   scientific   measurements   are   few   examples   ofnowadays fields heavily relying on computational power. Parallel programming has beendeveloped to make the most out of multi-core architectures. Yet, there are always underly-ing communications at some point between processes, applications, machines, clusters andso on. This honours project focussed on networking communications for parallel program-ming language occam. Robust and inherently parallel, it has been amongst the firsts to ap-proach the parallel programming world 30 years ago.<br/>
  Evidently,   occam   has   been   provided   a   network   architecture   since   then:   in   2006,   calledpOny. Nevertheless, in the last decade newer ones have emerged; being the starting point ofthis honours project charged of finding out a better network architecture and implementingit. It implicitly launched a “Back to occam” conquest where the ultimate aim would be tointegrate this new architecture into occam. This was where net2 came into consideration,both designed and implemented by Doctor Kevin Chalmers, it demonstrated its efficiencyand became number one contender for occam.<br/>
  However, occam is not of easy access: it is compiled with KRoC then interpreted by theTransterpreter. Therefore, the candidate network architecture will have to go through thesetwo layers. This projects intended to kick it off by developing an implementation in C lan-guage as both layers are so; its potential integration would then be much easier.<br/>
  As a final output of this honours project, a functional C implementation has effectivelybeen developed and experimented over several Raspberry-Pis using a distributed applica-tion. The point was that functionality was targeted, not efficiency. Indeed, its poor per-formance (inherent to this implementation and not to net2) is definitely the negative pointthis project suffers from. Though, the intended goal has been accomplished: a first candid-ate is now ready to be integrated, through the interpreter and compiler first, into occam
  * \section Obtain_section Obtain the code
  * The code is available online and version controled in a BitBucket repository at <a href="https://bitbucket.org/capellil/university_honours_project" alt="Link to the BitBucket repository">https://bitbucket.org/capellil/university_honours_project</a>.
  * \section Compile_Section Compile the programme
  * Once the source code has been downloaded, you just have to type the command 'make' to generate all binaries in a bin subfolder.
  * \author <a href="https://uk.linkedin.com/in/lcapelli" alt="LinkedIn profile">Capelli Ludovic</a>
  */